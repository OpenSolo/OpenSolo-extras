<plugin>
  <name>rtp</name>
  <description>Real-time protocol plugins</description>
  <filename>../../gst/rtp/.libs/libgstrtp.so</filename>
  <basename>libgstrtp.so</basename>
  <version>0.10.31</version>
  <license>LGPL</license>
  <source>gst-plugins-good</source>
  <package>GStreamer Good Plug-ins source release</package>
  <origin>Unknown package origin</origin>
  <elements>
    <element>
      <name>asteriskh263</name>
      <longname>RTP Asterisk H263 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H263 video from RTP and encodes in Asterisk H263 format</description>
      <author>Neil Stratford &lt;neils@vipadia.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-1998</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-asteriskh263</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpL16depay</name>
      <longname>RTP audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts raw audio from RTP packets</description>
      <author>Zeeshan Ali &lt;zak147@yahoo.com&gt;,Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)L16; application/x-rtp, media=(string)audio, payload=(int){ 10, 11 }, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-raw-int, endianness=(int)4321, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpL16pay</name>
      <longname>RTP audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Raw audio into RTP packets (RFC 3551)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-raw-int, endianness=(int)4321, signed=(boolean)true, width=(int)16, depth=(int)16, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)L16, channels=(int)[ 1, 2147483647 ]; application/x-rtp, media=(string)audio, encoding-name=(string)L16, payload=(int)10, clock-rate=(int)44100; application/x-rtp, media=(string)audio, encoding-name=(string)L16, payload=(int)11, clock-rate=(int)44100</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpac3depay</name>
      <longname>RTP AC3 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts AC3 audio from RTP packets (RFC 4184)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int){ 32000, 44100, 48000 }, encoding-name=(string)AC3</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/ac3</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpac3pay</name>
      <longname>RTP AC3 audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload AC3 audio as RTP packets (RFC 4184)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/ac3; audio/x-ac3</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int){ 32000, 44100, 48000 }, encoding-name=(string)AC3</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpamrdepay</name>
      <longname>RTP AMR depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts AMR or AMR-WB audio from RTP packets (RFC 3267)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)AMR, encoding-params=(string)1, octet-align=(string)1, crc=(string){ 0, 1 }, robust-sorting=(string)0, interleaving=(string)0; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)AMR-WB, encoding-params=(string)1, octet-align=(string)1, crc=(string){ 0, 1 }, robust-sorting=(string)0, interleaving=(string)0</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/AMR, channels=(int)1, rate=(int)8000; audio/AMR-WB, channels=(int)1, rate=(int)16000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpamrpay</name>
      <longname>RTP AMR payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode AMR or AMR-WB audio into RTP packets (RFC 3267)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/AMR, channels=(int)1, rate=(int)8000; audio/AMR-WB, channels=(int)1, rate=(int)16000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)AMR, encoding-params=(string)1, octet-align=(string)1, crc=(string)0, robust-sorting=(string)0, interleaving=(string)0, mode-set=(int)[ 0, 7 ], mode-change-period=(int)[ 1, 2147483647 ], mode-change-neighbor=(string){ 0, 1 }, maxptime=(int)[ 20, 2147483647 ], ptime=(int)[ 20, 2147483647 ]; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)AMR-WB, encoding-params=(string)1, octet-align=(string)1, crc=(string)0, robust-sorting=(string)0, interleaving=(string)0, mode-set=(int)[ 0, 7 ], mode-change-period=(int)[ 1, 2147483647 ], mode-change-neighbor=(string){ 0, 1 }, maxptime=(int)[ 20, 2147483647 ], ptime=(int)[ 20, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpbvdepay</name>
      <longname>RTP BroadcomVoice depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts BroadcomVoice audio from RTP packets (RFC 4298)</description>
      <author>Wim Taymans &lt;wim.taymans@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)BV16; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)BV32</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-bv, mode=(int){ 16, 32 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpbvpay</name>
      <longname>RTP BV Payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize BroadcomVoice audio streams into RTP packets (RFC 4298)</description>
      <author>Wim Taymans &lt;wim.taymans@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-bv, mode=(int){ 16, 32 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)BV16; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)BV32</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpceltdepay</name>
      <longname>RTP CELT depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts CELT audio from RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 32000, 48000 ], encoding-name=(string)CELT</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-celt</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpceltpay</name>
      <longname>RTP CELT payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes CELT audio into a RTP packet</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-celt, rate=(int)[ 32000, 64000 ], channels=(int)[ 1, 2 ], frame-size=(int)[ 64, 512 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 32000, 48000 ], encoding-name=(string)CELT</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpdepay</name>
      <longname>Dummy RTP session manager</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Accepts raw RTP and RTCP packets and sends them forward</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sinkrtcp</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtcp</details>
        </caps>
        <caps>
          <name>sinkrtp</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
        <caps>
          <name>srcrtcp</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtcp</details>
        </caps>
        <caps>
          <name>srcrtp</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpdvdepay</name>
      <longname>RTP DV Depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Depayloads DV from RTP packets (RFC 3189)</description>
      <author>Marcel Moreaux &lt;marcelm@spacelabs.nl&gt;, Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string){ video, audio }, payload=(int)[ 96, 127 ], encoding-name=(string)DV, clock-rate=(int)90000, encode=(string){ SD-VCR/525-60, SD-VCR/625-50, HD-VCR/1125-60, HD-VCR/1250-50, SDL-VCR/525-60, SDL-VCR/625-50, 306M/525-60, 306M/625-50, 314M-25/525-60, 314M-25/625-50, 314M-50/525-60, 314M-50/625-50 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-dv</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpdvpay</name>
      <longname>RTP DV Payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payloads DV into RTP packets (RFC 3189)</description>
      <author>Marcel Moreaux &lt;marcelm@spacelabs.nl&gt;, Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-dv</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string){ video, audio }, payload=(int)[ 96, 127 ], encoding-name=(string)DV, clock-rate=(int)90000, encode=(string){ SD-VCR/525-60, SD-VCR/625-50, HD-VCR/1125-60, HD-VCR/1250-50, SDL-VCR/525-60, SDL-VCR/625-50, 306M/525-60, 306M/625-50, 314M-25/525-60, 314M-25/625-50, 314M-50/525-60, 314M-50/625-50 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg722depay</name>
      <longname>RTP audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts G722 audio from RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)G722; application/x-rtp, media=(string)audio, payload=(int)9, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/G722, rate=(int)[ 1, 2147483647 ], channels=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg722pay</name>
      <longname>RTP audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Raw audio into RTP packets (RFC 3551)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/G722, rate=(int)16000, channels=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, encoding-name=(string)G722, payload=(int)9, clock-rate=(int)8000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg723depay</name>
      <longname>RTP G.723 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts G.723 audio from RTP packets (RFC 3551)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)G723; application/x-rtp, media=(string)audio, payload=(int)4, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/G723, channels=(int)1, rate=(int)8000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg723pay</name>
      <longname>RTP G.723 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize G.723 audio into RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/G723, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)4, clock-rate=(int)8000, encoding-name=(string)G723; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)G723</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg726depay</name>
      <longname>RTP G.726 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts G.726 audio from RTP packets</description>
      <author>Axis Communications &lt;dev-gstreamer@axis.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string){ G726, G726-16, G726-24, G726-32, G726-40, AAL2-G726-16, AAL2-G726-24, AAL2-G726-32, AAL2-G726-40 }, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-adpcm, channels=(int)1, rate=(int)8000, bitrate=(int){ 16000, 24000, 32000, 40000 }, layout=(string)g726</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg726pay</name>
      <longname>RTP G.726 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes G.726 audio into a RTP packet</description>
      <author>Axis Communications &lt;dev-gstreamer@axis.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-adpcm, channels=(int)1, rate=(int)8000, bitrate=(int){ 16000, 24000, 32000, 40000 }, layout=(string)g726</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string){ G726-16, G726-24, G726-32, G726-40, AAL2-G726-16, AAL2-G726-24, AAL2-G726-32, AAL2-G726-40 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg729depay</name>
      <longname>RTP G.729 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts G.729 audio from RTP packets (RFC 3551)</description>
      <author>Laurent Glayal &lt;spglegle@yahoo.fr&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)G729; application/x-rtp, media=(string)audio, payload=(int)18, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/G729, channels=(int)1, rate=(int)8000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpg729pay</name>
      <longname>RTP G.729 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize G.729 audio into RTP packets</description>
      <author>Olivier Crete &lt;olivier.crete@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/G729, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)18, clock-rate=(int)8000, encoding-name=(string)G729; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)G729</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpgsmdepay</name>
      <longname>RTP GSM depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts GSM audio from RTP packets</description>
      <author>Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)GSM; application/x-rtp, media=(string)audio, payload=(int)3, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-gsm, rate=(int)8000, channels=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpgsmpay</name>
      <longname>RTP GSM payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes GSM audio into a RTP packet</description>
      <author>Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-gsm, rate=(int)8000, channels=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)3, clock-rate=(int)8000, encoding-name=(string)GSM; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)GSM</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpgstdepay</name>
      <longname>GStreamer depayloader</longname>
      <class>Codec/Depayloader/Network</class>
      <description>Extracts GStreamer buffers from RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)application, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)X-GST</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpgstpay</name>
      <longname>RTP GStreamer payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload GStreamer buffers as RTP packets</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>ANY</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)application, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)X-GST</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph263depay</name>
      <longname>RTP H263 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H263 video from RTP packets (RFC 2190)</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;, Edward Hervey &lt;bilboed@bilboed.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)34, clock-rate=(int)90000, encoding-name=(string)H263; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-h263, variant=(string)itu, h263version=(string)h263</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph263pay</name>
      <longname>RTP H263 packet payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes H263 video in RTP packets (RFC 2190)</description>
      <author>Neil Stratford &lt;neils@vipadia.com&gt;Dejan Sakelsak &lt;dejan.sakelsak@marand.si&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-h263, variant=(string)itu, h263version=(string)h263</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)34, clock-rate=(int)90000, encoding-name=(string)H263; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph263pdepay</name>
      <longname>RTP H263 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H263/+/++ video from RTP packets (RFC 4629)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)H263-1998; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)H263-2000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-h263, variant=(string)itu</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph263ppay</name>
      <longname>RTP H263 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes H263/+/++ video in RTP packets (RFC 4629)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-h263, variant=(string)itu</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-1998; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H263-2000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph264depay</name>
      <longname>RTP H264 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts H264 video from RTP packets (RFC 3984)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H264</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-h264</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtph264pay</name>
      <longname>RTP H264 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode H264 video into RTP packets (RFC 3984)</description>
      <author>Laurent Glayal &lt;spglegle@yahoo.fr&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-h264</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)H264</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpilbcdepay</name>
      <longname>RTP iLBC depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts iLBC audio from RTP packets (RFC 3952)</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)ILBC, mode=(string){ 20, 30 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-iLBC, mode=(int){ 20, 30 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpilbcpay</name>
      <longname>RTP iLBC Payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize iLBC audio streams into RTP packets</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-iLBC, mode=(int){ 20, 30 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)ILBC, mode=(string){ 20, 30 }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpj2kdepay</name>
      <longname>RTP JPEG 2000 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts JPEG 2000 video from RTP packets (RFC 5371)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)JPEG2000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>image/x-jpc</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpj2kpay</name>
      <longname>RTP JPEG 2000 payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes JPEG 2000 pictures into RTP packets (RFC 5371)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>image/x-jpc</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)JPEG2000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpjpegdepay</name>
      <longname>RTP JPEG depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts JPEG video from RTP packets (RFC 2435)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)JPEG; application/x-rtp, media=(string)video, payload=(int)26, clock-rate=(int)90000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>image/jpeg</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpjpegpay</name>
      <longname>RTP JPEG payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes JPEG pictures into RTP packets (RFC 2435)</description>
      <author>Axis Communications &lt;dev-gstreamer@axis.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>image/jpeg; video/x-jpeg</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)26, clock-rate=(int)90000, encoding-name=(string)JPEG</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp1sdepay</name>
      <longname>RTP MPEG1 System Stream depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG1 System Streams from RTP packets (RFC 3555)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)other, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP1S; application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP1S</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpeg, systemstream=(boolean)true</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp2tdepay</name>
      <longname>RTP MPEG Transport Stream depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG2 TS from RTP packets (RFC 2250)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;, Thijs Vermeir &lt;thijs.vermeir@barco.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP2T-ES; application/x-rtp, media=(string)video, payload=(int)33, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpegts, packetsize=(int)188, systemstream=(boolean)true</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp2tpay</name>
      <longname>RTP MPEG2 Transport Stream payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes MPEG2 TS into RTP packets (RFC 2250)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/mpegts, packetsize=(int)188, systemstream=(boolean)true</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MP2T-ES</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4adepay</name>
      <longname>RTP MPEG4 audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG4 audio from RTP packets (RFC 3016)</description>
      <author>Nokia Corporation (contact &lt;stefan.kost@nokia.com&gt;), Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4A-LATM</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)4, framed=(boolean)true, stream-format=(string)raw</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4apay</name>
      <longname>RTP MPEG4 audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload MPEG4 audio as RTP packets (RFC 3016)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)4, stream-format=(string)raw</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4A-LATM</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4gdepay</name>
      <longname>RTP MPEG4 ES depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG4 elementary streams from RTP packets (RFC 3640)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string){ video, audio, application }, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MPEG4-GENERIC, streamtype=(string){ 4, 5 }, mode=(string){ generic, CELP-cbr, CELP-vbr, AAC-lbr, AAC-hbr }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4gpay</name>
      <longname>RTP MPEG4 ES payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload MPEG4 elementary streams as RTP packets (RFC 3640)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; audio/mpeg, mpegversion=(int)4, stream-format=(string)raw</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string){ video, audio, application }, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MPEG4-GENERIC, streamtype=(string){ 4, 5 }, mode=(string){ generic, CELP-cbr, CELP-vbr, AAC-lbr, AAC-hbr }</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4vdepay</name>
      <longname>RTP MPEG4 video depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG4 video from RTP packets (RFC 3016)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4V-ES</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmp4vpay</name>
      <longname>RTP MPEG4 Video payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload MPEG-4 video as RTP packets (RFC 3016)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)4, systemstream=(boolean)false; video/x-xvid</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)MP4V-ES</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmpadepay</name>
      <longname>RTP MPEG audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG audio from RTP packets (RFC 2038)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPA; application/x-rtp, media=(string)audio, payload=(int)14, clock-rate=(int)90000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmpapay</name>
      <longname>RTP MPEG audio payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload MPEG audio as RTP packets (RFC 2038)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)14, clock-rate=(int)90000; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPA</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmparobustdepay</name>
      <longname>RTP MPEG audio depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG audio from RTP packets (RFC 5219)</description>
      <author>Mark Nauwelaerts &lt;mark.nauwelaerts@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPA-ROBUST; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string){ X-MP3-DRAFT-00, X-MP3-DRAFT-01, X-MP3-DRAFT-02, X-MP3-DRAFT-03, X-MP3-DRAFT-04, X-MP3-DRAFT-05, X-MP3-DRAFT-06 }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/mpeg, mpegversion=(int)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmpvdepay</name>
      <longname>RTP MPEG video depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts MPEG video from RTP packets (RFC 2250)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)MPV; application/x-rtp, media=(string)video, payload=(int)32, clock-rate=(int)90000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)2, systemstream=(boolean)false</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpmpvpay</name>
      <longname>RTP MPEG2 ES video payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes MPEG2 ES into RTP packets (RFC 2250)</description>
      <author>Thijs Vermeir &lt;thijsvermeir@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/mpeg, mpegversion=(int)2, systemstream=(boolean)false</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)32, clock-rate=(int)90000, encoding-name=(string)MPV</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtppcmadepay</name>
      <longname>RTP PCMA depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts PCMA audio from RTP packets</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;, Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)8, clock-rate=(int)8000, encoding-name=(string)PCMA; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)PCMA</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-alaw, channels=(int)1, rate=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtppcmapay</name>
      <longname>RTP PCMA payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes PCMA audio into a RTP packet</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-alaw, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)8, clock-rate=(int)8000, encoding-name=(string)PCMA; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)PCMA</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtppcmudepay</name>
      <longname>RTP PCMU depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts PCMU audio from RTP packets</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;, Zeeshan Ali &lt;zeenix@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)0, encoding-name=(string)PCMU, clock-rate=(int)8000; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string)PCMU, clock-rate=(int)[ 1, 2147483647 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-mulaw, channels=(int)1, rate=(int)[ 1, 2147483647 ]</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtppcmupay</name>
      <longname>RTP PCMU payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes PCMU audio into a RTP packet</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-mulaw, channels=(int)1, rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)0, clock-rate=(int)8000, encoding-name=(string)PCMU; application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)PCMU</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpqcelpdepay</name>
      <longname>RTP QCELP depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts QCELP (PureVoice) audio from RTP packets (RFC 2658)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)8000, encoding-name=(string)QCELP; application/x-rtp, media=(string)audio, payload=(int)12, clock-rate=(int)8000</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/qcelp, channels=(int)1, rate=(int)8000</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpqdm2depay</name>
      <longname>RTP QDM2 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts QDM2 audio from RTP packets (no RFC)</description>
      <author>Edward Hervey &lt;bilboed@bilboed.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], encoding-name=(string)X-QDM</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-qdm2</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsirendepay</name>
      <longname>RTP Siren packet depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Siren audio from RTP packets</description>
      <author>Philippe Kalaf &lt;philippe.kalaf@collabora.co.uk&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)SIREN, dct-length=(int)320</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-siren, dct-length=(int)320</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsirenpay</name>
      <longname>RTP Payloader for Siren Audio</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Packetize Siren audio streams into RTP packets</description>
      <author>Youness Alaoui &lt;kakaroto@kakaroto.homelinux.net&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-siren, dct-length=(int)320</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)16000, encoding-name=(string)SIREN, bitrate=(string)16000, dct-length=(int)320</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpspeexdepay</name>
      <longname>RTP Speex depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Speex audio from RTP packets</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 6000, 48000 ], encoding-name=(string)SPEEX, encoding-params=(string)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-speex</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpspeexpay</name>
      <longname>RTP Speex payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encodes Speex audio into a RTP packet</description>
      <author>Edgard Lima &lt;edgard.lima@indt.org.br&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-speex, rate=(int)[ 6000, 48000 ], channels=(int)1</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 6000, 48000 ], encoding-name=(string)SPEEX, encoding-params=(string)1</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpsv3vdepay</name>
      <longname>RTP SVQ3 depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts SVQ3 video from RTP packets (no RFC)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string){ X-SV3V-ES, X-SORENSON-VIDEO, X-SORENSONVIDEO, X-SorensonVideo }</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-svq, svqversion=(int)3</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtptheoradepay</name>
      <longname>RTP Theora depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Theora video from RTP packets (draft-01 of RFC XXXX)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)THEORA</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-theora</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtptheorapay</name>
      <longname>RTP Theora payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Theora video into RTP packets (draft-01 RFC XXXX)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-theora</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)THEORA</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvorbisdepay</name>
      <longname>RTP Vorbis depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts Vorbis Audio from RTP packets (RFC 5215)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)VORBIS</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>audio/x-vorbis</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvorbispay</name>
      <longname>RTP Vorbis depayloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload-encode Vorbis audio into RTP packets (RFC 5215)</description>
      <author>Wim Taymans &lt;wimi.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>audio/x-vorbis</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)audio, payload=(int)[ 96, 127 ], clock-rate=(int)[ 1, 2147483647 ], encoding-name=(string)VORBIS</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvrawdepay</name>
      <longname>RTP Raw Video depayloader</longname>
      <class>Codec/Depayloader/Network/RTP</class>
      <description>Extracts raw video from RTP packets (RFC 4175)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)RAW</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>video/x-raw-rgb; video/x-raw-yuv</details>
        </caps>
      </pads>
    </element>
    <element>
      <name>rtpvrawpay</name>
      <longname>RTP Raw Video payloader</longname>
      <class>Codec/Payloader/Network/RTP</class>
      <description>Payload raw video as RTP packets (RFC 4175)</description>
      <author>Wim Taymans &lt;wim.taymans@gmail.com&gt;</author>
      <pads>
        <caps>
          <name>sink</name>
          <direction>sink</direction>
          <presence>always</presence>
          <details>video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)16711680, green_mask=(int)65280, blue_mask=(int)255, width=(int)[ 1, 32767 ], height=(int)[ 1, 32767 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)-16777216, green_mask=(int)16711680, blue_mask=(int)65280, alpha_mask=(int)255, width=(int)[ 1, 32767 ], height=(int)[ 1, 32767 ]; video/x-raw-rgb, bpp=(int)24, depth=(int)24, endianness=(int)4321, red_mask=(int)255, green_mask=(int)65280, blue_mask=(int)16711680, width=(int)[ 1, 32767 ], height=(int)[ 1, 32767 ]; video/x-raw-rgb, bpp=(int)32, depth=(int)32, endianness=(int)4321, red_mask=(int)65280, green_mask=(int)16711680, blue_mask=(int)-16777216, alpha_mask=(int)255, width=(int)[ 1, 32767 ], height=(int)[ 1, 32767 ]; video/x-raw-yuv, format=(fourcc){ AYUV, UYVY, I420, Y41B, UYVP }, width=(int)[ 1, 32767 ], height=(int)[ 1, 32767 ]</details>
        </caps>
        <caps>
          <name>src</name>
          <direction>source</direction>
          <presence>always</presence>
          <details>application/x-rtp, media=(string)video, payload=(int)[ 96, 127 ], clock-rate=(int)90000, encoding-name=(string)RAW, sampling=(string){ RGB, RGBA, BGR, BGRA, YCbCr-4:4:4, YCbCr-4:2:2, YCbCr-4:2:0, YCbCr-4:1:1 }, depth=(string){ 8, 10, 12, 16 }, colorimetry=(string){ BT601-5, BT709-2, SMPTE240M }</details>
        </caps>
      </pads>
    </element>
  </elements>
</plugin>